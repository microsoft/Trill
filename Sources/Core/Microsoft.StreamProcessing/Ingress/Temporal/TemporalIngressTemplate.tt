<#@ template language="C#" inherits="CommonUnaryTemplate" visibility="internal" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
/*\
    * Spec:
    *
    * Apply punctuation policy first. This means that even dropped events
    * count towards the number of events seen since the last punctuation.
    * For a Time punctuation policy, insert the punctuation before the
    * event whose start time causes the insertion.
    *
    * Most complicated part is the bookkeeping. If the disorder policy is
    * not Throw, then any events that are dropped or adjusted must be kept
    * track of so that matching end events are dealt with.
    *
    * DisorderPolicy.Throw:
    *   Don't drop any events.
    *
    * DisorderPolicy.Drop:
    *   Start event: drop if it is out of order and remember it so corresponding
    *   end event is also dropped.
    *   End event: drop if its corresponding start event was dropped or if it is out
    *   of order (latter may leave dangling start events that never have an end event).
    *   Interval event: drop if it is out of order
    *   Punctuation event: ??
    *
    * DisorderPolicy.Adjust:
    *   Start event: if out of order, update start time to start time of previous event.
    *   Remember event so corresponding end event is also modified.
    *   End event: if out of order, update start time to start time of previous event.
    *   If not out of order, check to see if corresponding start event had been modified.
    *   If so, then update its end time to the modified start time of the start event.
    *   (This is needed so that its end time matches the start time of the corresponding
    *   start event.)
    *   Interval event: if out of order, update start time to start time of previous event.
    *   If its updated start time is now equal to or greater than its end time, drop it.
\*/

using System;
using System.Diagnostics.Contracts;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using Microsoft.StreamProcessing;
using Microsoft.StreamProcessing.Internal;
using Microsoft.StreamProcessing.Internal.Collections;

<#  bool partitioned = (partitionString == "Partitioned");
    string baseStructure = partitionString + "StreamEvent<" + adjustedGenericArgs + ">";
    string globalPunctuation = partitioned ? "LowWatermark" : "Punctuation";
    string highWatermark = partitioned ? "partitionHighWatermarks[value.PartitionKey]" : "highWatermark";
    string keyType = !partitioned ? "Microsoft.StreamProcessing.Empty" : "PartitionKey<TKey>";
    string streamEventFromValue = fusionOption == "Disordered" ? ("new " + partitionString + "StreamEvent<" + genericArguments + ">(" + (!partitioned ? string.Empty : "value.PartitionKey, ") + "value.SyncTime, value.OtherTime, default)") : "value";
#>
[assembly: IgnoresAccessChecksTo("Microsoft.StreamProcessing")]
[DataContract]
internal sealed class <#= className #><#= genericParameters #> : <#= partitionString #><#= fusionOption == "Disordered" ? "Disordered" : string.Empty #>ObserverSubscriptionBase<<#= keyOrNothing #><#= inheritBase #>, <#= TPayload #>, <#= TResult #>>
{
    <#= staticCtor #>
<#  if (partitioned) { #>
    private static readonly Func<TKey, int> GetHashCode = EqualityComparerExpression<TKey>.DefaultGetHashCodeFunction;
<#  } #>

    public <#= className #>() { }

    public <#= className #>(
        IObservable<<#= inheritBase #>> observable,
        string identifier,
        IStreamable<<#= keyType #>, <#= payloadOrResult #>> streamable,
        IStreamObserver<<#= keyType #>, <#= payloadOrResult #>> observer,
        DisorderPolicy disorderPolicy,
        <#= partitionString #>FlushPolicy flushPolicy,
        PeriodicPunctuationPolicy punctuationPolicy,
<#  if (partitioned) { #>
        PeriodicLowWatermarkPolicy lowWatermarkPolicy,
<#  } #>
        OnCompletedPolicy onCompletedPolicy,
        IObserver<OutOfOrder<#= partitionString #>StreamEvent<<#= genericArguments #>>> diagnosticOutput)
            : base(observable,
                identifier,
                streamable,
                observer,
                disorderPolicy,
                flushPolicy,
                punctuationPolicy,
<#  if (partitioned) { #>
                lowWatermarkPolicy,
<#  } #>
                onCompletedPolicy,
                diagnosticOutput)
    {
        <#= GeneratedBatchName #> generatedBatch = (<#= GeneratedBatchName #>) this.currentBatch;
<#  foreach (var f in this.resultRepresentation.AllFields.Where(fld => fld.OptimizeString()))
    {  #>
        generatedBatch.<#= f.Name #>.Initialize();
<#  } #>
    }

    [ContractInvariantMethod]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "Required for code contracts.")]
    private void ObjectInvariant()
    {
        Contract.Invariant(this.startEventInformation != null);
<#  if (!partitioned)
    { #>
        Contract.Invariant(StreamEvent.MinSyncTime <= this.currentTime);
<#  } #>
    }

    protected override void FlushContents()
    {
        base.FlushContents();
        <#= GeneratedBatchName #> generatedBatch = (<#= GeneratedBatchName #>) this.currentBatch;
<#  foreach (var f in this.resultRepresentation.AllFields.Where(fld => fld.OptimizeString()))
    {  #>
        generatedBatch.<#= f.Name #>.Initialize();
<#  } #>
    }

    public override void OnNext(<#= inheritBase #> <#= ingressType == "StreamEvent" ? "value" : "inputValue" #>)
    {
        Contract.EnsuresOnThrow<IngressException>(true);
<#  if (ingressType == "Interval")
    { #>
        var value = <#= partitionString #>StreamEvent.CreateInterval(<#= !partitioned ? string.Empty : this.partitionFunction("inputValue") + ", " #><#= this.startEdgeFunction("inputValue") #>, <#= this.endEdgeFunction("inputValue") #>, inputValue);
<#  }
    if (fusionOption == "Disordered")
    { #>
<#= leadingText #>
        Action(value.SyncTime, <#= generatedEndTimeVariable #>, transformedValue, <#= !partitioned ? "Microsoft.StreamProcessing.Empty.Default" : "new PartitionKey<TKey>(value.PartitionKey)" #>);
<#= trailingText #>
    }

    private void Action(long start, long end, <#= TResult #> payload, <#= keyType #> actionKey)
    {
        var value = new <#= partitionString #>StreamEvent<<#= !partitioned ? string.Empty : "TKey, " #><#= TResult #>>(<#= !partitioned ? string.Empty : "actionKey.Key, " #>start, end, payload);
<#  } #>
        if (value.Is<#= globalPunctuation #>)
        {
            GenerateAndProcess<#= globalPunctuation #>(value.SyncTime);
            return;
        }

<#  if (latencyOption == "WithLatency")
    {
        if (partitioned)
        { #>
            // Check to see if we need to generate a low watermark due to PeriodicLowWatermarkPolicy
            if (lowWatermarkPolicyType == PeriodicLowWatermarkPolicyType.Time &&
                value.SyncTime > lowWatermarkTimestampLag)
            {
                var newLowWatermark = value.SyncTime - lowWatermarkTimestampLag;
                if ((ulong)(newLowWatermark - this.lowWatermark.quantizedForLowWatermarkGeneration) >= lowWatermarkGenerationPeriod)
                {
                    // SyncTime is sufficiently high to generate a new watermark, but first snap it to the nearest generationPeriod boundary
                    var newLowWatermarkSnapped = newLowWatermark.SnapToLeftBoundary((long)lowWatermarkGenerationPeriod);
                    GenerateAndProcessLowWatermark(newLowWatermarkSnapped);
                }
            }

        if (!this.currentTime.TryGetValue(value.PartitionKey, out long moveFrom) || moveFrom < this.lowWatermark.rawValue)
        {
            moveFrom = this.lowWatermark.rawValue;
        }

        if (!partitionHighWatermarks.ContainsKey(value.PartitionKey))
        {
            partitionHighWatermarks.Add(value.PartitionKey, this.lowWatermark.rawValue);

            if (highWatermarkToPartitionsMap.TryGetValue(this.lowWatermark.rawValue, out HashSet<TKey> keySet)) keySet.Add(value.PartitionKey);
            else highWatermarkToPartitionsMap.Add(this.lowWatermark.rawValue, new HashSet<TKey> { value.PartitionKey });
        }
<#      }
        else
        { #>
        long moveFrom = currentTime;
<#      } #>
        long moveTo = moveFrom;

        // Events at the reorder boundary or earlier - are handled using default processing policies
        if (value.SyncTime <= moveFrom)
        {
            Process(ref value);
            return;
        }

        var oldTime = <#= highWatermark #>;
        if (value.SyncTime > oldTime)
        {
            <#= highWatermark #> = value.SyncTime;

<#          if (partitioned)
            { #>
            var oldSet = this.highWatermarkToPartitionsMap[oldTime];
            if (oldSet.Count <= 1) this.highWatermarkToPartitionsMap.Remove(oldTime);
            else oldSet.Remove(value.PartitionKey);

            if (this.highWatermarkToPartitionsMap.TryGetValue(value.SyncTime, out HashSet<TKey> set)) set.Add(value.PartitionKey);
            else this.highWatermarkToPartitionsMap.Add(value.SyncTime, new HashSet<TKey> { value.PartitionKey });

<#          }
            if (ingressType == "StreamEvent" && partitioned)
            {
                PushIndent("    "); #>
        if (value.IsData)
        {
            // moveTo for punctuations is updated below
<#          } #>
            moveTo = value.SyncTime - this.reorderLatency;
            if (moveTo < StreamEvent.MinSyncTime) moveTo = StreamEvent.MinSyncTime;
            if (moveTo < moveFrom) moveTo = moveFrom;
            }
<#          if (ingressType == "StreamEvent" && partitioned)
            {
                PopIndent(); #>
        }

        if (value.IsPunctuation)
        {
            moveTo = Math.Max(moveFrom, value.SyncTime);
        }
<#          } #>

        if (moveTo > moveFrom)
        {
            if (priorityQueueSorter != null)
            {
                <#= partitionString #>StreamEvent<<#= adjustedGenericArgs #>> resultEvent;

                while ((!priorityQueueSorter.IsEmpty()) && priorityQueueSorter.Peek().SyncTime <= moveTo)
                {
                    resultEvent = priorityQueueSorter.Dequeue();
                    Process(ref resultEvent);
                }
            }
            else
            {
                // Extract and process data in-order from impatience, until timestamp of moveTo
                PooledElasticCircularBuffer<<#= baseStructure #>> streamEvents = impatienceSorter.DequeueUntil(<#= !partitioned ? string.Empty : "value.PartitionKey, " #> moveTo, out bool recheck);

                if (streamEvents != null)
                {
                    <#= baseStructure #> resultEvent;
                    while ((streamEvents.Count > 0) && ((!recheck) || (streamEvents.PeekFirst().SyncTime <= moveTo)))
                    {
                        resultEvent = streamEvents.Dequeue();
                        Process(ref resultEvent);
                    }
                }

                if (!recheck && (streamEvents != null))
                    impatienceSorter.Return(<#= !partitioned ? string.Empty : "value.PartitionKey, " #> streamEvents);
            }
        }

        if (value.SyncTime == moveTo)
        {
            Process(ref value);
            return;
        }

        // Enqueue value into impatience
        if (priorityQueueSorter != null) priorityQueueSorter.Enqueue(value);
        else impatienceSorter.Enqueue(ref value);

        UpdateCurrentTime(<# if (partitioned) { #>value.PartitionKey, <# } #>moveTo<# if (partitioned) { #>, fromEvent: false<# } #>);
    }

    private void Process(ref <#= baseStructure #> value)
    {
        Contract.EnsuresOnThrow<IngressException>(true);
<#  }

    if (ingressType == "StreamEvent")
    { #>
        Contract.Assume(value.SyncTime != value.OtherTime);

<#  }

    if (ingressType == "StreamEvent" && latencyOption == "WithLatency")
    { #>
        if (value.Is<#= globalPunctuation #>)
        {
            GenerateAndProcess<#= globalPunctuation #>(value.SyncTime);
            return;
        }

<#  }
    if (!partitioned)
    { #>
        long current = currentTime;
<#  }
    else
    { #>
        // Update global high water mark if necessary
        highWatermark = Math.Max(highWatermark, value.SyncTime);

        if (punctuationPolicyType == PeriodicPunctuationPolicyType.Time && !lastPunctuationTime.ContainsKey(value.PartitionKey))
            UpdatePunctuation(value.PartitionKey, this.lowWatermark.rawValue, this.lowWatermark.quantizedForPunctuationGeneration);

        // Retrieve current time for this partition, updating currentTime if necessary
        long current;
        if (!currentTime.TryGetValue(value.PartitionKey, out current))
        {
            current = lowWatermark;
        }
        else if (current < lowWatermark)
        {
            current = lowWatermark;
            currentTime[value.PartitionKey] = lowWatermark;
        }
<#  } #>

        var outOfOrder = value.SyncTime < current;
        if (punctuationPolicyType == PeriodicPunctuationPolicyType.Time)
        {
<#  if (ingressType == "StreamEvent" && partitioned)
    { #>
            // Track punctuation
            if (value.IsPunctuation && value.SyncTime > lastPunctuationTime[value.PartitionKey].lastPunctuation)
                UpdatePunctuation(value.PartitionKey, value.SyncTime);

<#  } #>
            // out of order events shouldn't count, and if the disorder policy adjusts their sync time, then it
            // will be made equal to a timestamp already seen earlier in the sequence and this would have triggered
            // (if necessary) when that timestamp was seen.
<#  if (!partitioned)
    { #>
            ulong delta = (ulong)(value.SyncTime - lastPunctuationTime);
            if (!outOfOrder && delta >= punctuationGenerationPeriod)
            {
                // SyncTime is sufficiently high to generate a new punctuation, but first snap it to the nearest generationPeriod boundary
                var punctuationTimeQuantized = value.SyncTime.SnapToLeftBoundary((long)punctuationGenerationPeriod);
#if DEBUG
                Debug.Assert(punctuationTimeQuantized >= LastEventTime(), "Bug in punctuation quantization logic");
#endif
                OnPunctuation(StreamEvent.CreatePunctuation<<#= fusionOption == "Disordered" ? TResult : TPayload #>>(punctuationTimeQuantized));
            }
<#  }
    else
    { #>
            if (!outOfOrder && this.punctuationGenerationPeriod > 0)
            {
                // We use lowWatermark as the baseline in the delta computation because a low watermark implies
                // punctuations for all partitions
                var prevPunctuation = Math.Max(this.lastPunctuationTime[value.PartitionKey].lastPunctuationQuantized, this.lowWatermark.quantizedForPunctuationGeneration);
                if ((ulong)(value.SyncTime - prevPunctuation) >= this.punctuationGenerationPeriod)
                {
                    // SyncTime is sufficiently high to generate a new punctuation, but first snap it to the nearest generationPeriod boundary
                    var punctuationTimeQuantized = value.SyncTime.SnapToLeftBoundary((long)this.punctuationGenerationPeriod);
#if DEBUG
                    Debug.Assert(punctuationTimeQuantized >= LastEventTime(value.PartitionKey), "Bug in punctuation quantization logic");
#endif
                    OnPunctuation(value.CreatePunctuation(punctuationTimeQuantized));
                }
            }
<#  }  #>
        }

<#  if (ingressType == "StreamEvent")
    { #>
        // check for out of order event
<#      if (partitioned)
        { #>
        if (value.IsPunctuation)
        {
            OnPunctuation(value.CreatePunctuation(outOfOrder ? current : value.SyncTime));
        }
        else
        {
<#              PushIndent("    ");
            }
        } #>
        if (disorderPolicyType == DisorderPolicyType.Throw)
        {
            if (outOfOrder)
            {
                throw new IngressException($"Out-of-order event encountered during ingress, under a disorder policy of Throw: value.SyncTime: {value.SyncTime}, current: {current}");
            }
        }
        else
        {
<#      if (ingressType == "StreamEvent")
        { #>
            // end events and interval events just get dropped
            Tuple<long, <#= fusionOption == "Disordered" ? TResult : TPayload #>> key;
            ElasticCircularBuffer<AdjustInfo> q;
            switch (value.Kind)
            {
                case StreamEventKind.Start:
                    if (outOfOrder)
                    {
                        key = Tuple.Create(value.SyncTime, value.Payload);
                        if (!startEventInformation.TryGetValue(key, out q))
                        {
                            q = new ElasticCircularBuffer<AdjustInfo>();
                            startEventInformation.Add(key, q);
                            var x = new AdjustInfo(current);
                            q.Enqueue(ref x);
                        }
                        else
                        {
                            var last = q.PeekLast();
                            if (last.modifiedStartTime == current) last.numberOfOccurrences++;
                            else
                            {
                                var x = new AdjustInfo(current);
                                q.Enqueue(ref x);
                            }
                        }

                        if (disorderPolicyType == DisorderPolicyType.Drop)
                        {
                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?()));
                            return; // drop
                        }
                        else
                        {
                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?(current - value.SyncTime)));
                            value = new <#= partitionString #>StreamEvent<<#= adjustedGenericArgs #>>(<#= !partitioned ? string.Empty : "value.PartitionKey, " #>current, StreamEvent.InfinitySyncTime, value.Payload);
                        }
                    }
                    break;

                case StreamEventKind.Interval:
<#      } #>
                    if (outOfOrder)
                    {
                        if (disorderPolicyType == DisorderPolicyType.Drop)
                        {
                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?()));
                            return; // drop
                        }
                        else
                        {
                            if (current >= value.OtherTime)
                            {
                                diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?()));
                                return; // drop
                            }

                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?(current - value.SyncTime)));
                            value = new <#= partitionString #>StreamEvent<<#= adjustedGenericArgs #>>(<#= !partitioned ? string.Empty : "value.PartitionKey, " #>current, value.OtherTime, value.Payload);
                        }
                    }
<#      if (ingressType == "StreamEvent")
        { #>
                    break;

                case StreamEventKind.End:
                    // it may not be out of order, but did we drop/adjust the corresponding start event?
                    key = Tuple.Create(value.OtherTime, value.Payload);
                    if (startEventInformation.TryGetValue(key, out q))
                    {
                        Contract.Assume(!q.IsEmpty());
                        var firstElement = q.PeekFirst();
                        firstElement.numberOfOccurrences--;
                        if (firstElement.numberOfOccurrences == 0)
                        {
                            q.Dequeue(); // throw away returned value
                            if (q.Count == 0) startEventInformation.Remove(key);
                        }
                        var adjustedTime = firstElement.modifiedStartTime;

                        if (disorderPolicyType == DisorderPolicyType.Drop)
                        {
                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?()));
                            return; // drop
                        }
                        else
                        {
                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?(current - value.SyncTime)));
                            value = new <#= partitionString #>StreamEvent<<#= adjustedGenericArgs #>>(<#= !partitioned ? string.Empty : ("value.PartitionKey, ") #>outOfOrder ? current : value.SyncTime, adjustedTime, value.Payload);
                        }
                    }
                    else if (outOfOrder)
                    {
                        if (disorderPolicyType == DisorderPolicyType.Drop)
                        {
                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?()));
                            return; // drop
                        }
                        else
                        {
                            diagnosticOutput?.OnNext(OutOfOrder<#= partitionString #>StreamEvent.Create(<#= streamEventFromValue #>, new long?(current - value.SyncTime)));
                            value = new <#= partitionString #>StreamEvent<<#= adjustedGenericArgs #>>(<#= !partitioned ? string.Empty : ("value.PartitionKey, ") #>current, value.OtherTime, value.Payload);
                        }
                    }

                    break;
                default:
                    Contract.Assert(false, "switch meant to be exhaustive");
                    throw new InvalidOperationException("Unsupported stream event kind: " + value.Kind.ToString());
            }
<#      } #>
        }

<#      PushIndent("            "); #>
<#=     fusionOption == "Fused" ? leadingText : string.Empty #>
<#      AddToGeneratedBatch(); #>
<#=     fusionOption == "Fused" ? trailingText : string.Empty #>
<#      PopIndent(); #>
<#      if (partitioned && ingressType == "StreamEvent")
        {
            PopIndent(); #>
        }
<#      } #>

        UpdateCurrentTime(<# if (partitioned) { #>value.PartitionKey, <# } #>value.SyncTime);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void UpdateCurrentTime(<# if (partitioned) { #>TKey partitionKey, <# } #>long time<# if (partitioned) { #>, bool fromEvent = true<# } #>)
    {
<#      if (!partitioned)
        { #>
        if (this.currentTime < time)
        {
            this.currentTime = time;
        }
<#      }
        else
        { #>
        if (!this.currentTime.TryGetValue(partitionKey, out long oldCurrentTime) || oldCurrentTime < time)
        {
            this.currentTime[partitionKey] = time;
        }
#if DEBUG
        if (fromEvent && (!this.lastEventTime.TryGetValue(partitionKey, out long oldEventTime) || oldEventTime < time))
        {
            this.lastEventTime[partitionKey] = time;
        }
#endif
<#      }#>
    }

    private void GenerateAndProcess<#= globalPunctuation #>(long syncTime)
    {
        if (syncTime <= <#= partitioned ? "this.lowWatermark.rawValue" : "this.lastPunctuationTime" #>) return;

<#      if (!partitioned)
        { #>
            // Update the <#= globalPunctuation #> to be at least the currentTime, so the <#= globalPunctuation #>
            // is not before the preceding data event.
<#          if (latencyOption == "WithLatency")
            { #>
            // Note that currentTime only reflects events already processed, and excludes events in the reorder buffer.
<#          } #>
            syncTime = Math.Max(syncTime, this.currentTime);
<#      } #>

<#      if (latencyOption == "WithLatency")
        { #>
        // Process events queued for reorderLatency up to the <#= globalPunctuation #> syncTime
        if (priorityQueueSorter != null)
        {
            <#= baseStructure #> resultEvent;
            while ((!priorityQueueSorter.IsEmpty()) && priorityQueueSorter.Peek().SyncTime <= syncTime)
            {
                resultEvent = priorityQueueSorter.Dequeue();
                Process(ref resultEvent);
            }
        }
        else
        {
<#          if (partitioned)
            { #>
            bool recheck;
            var PartitionedstreamEvents = impatienceSorter.DequeueUntil(syncTime);

            int index = FastDictionary<TKey, Tuple<bool, PooledElasticCircularBuffer<PartitionedStreamEvent<TKey, <#= TPayload #>>>>>.IteratorStart;
            while(<#= partitionString #>streamEvents.Iterate(ref index))
            {
                var entry = <#= partitionString #>streamEvents.entries[index];
                recheck = entry.value.Item1;
                var streamEvents = entry.value.Item2;
<#              PushIndent("    ");
            }
            else
            { #>
            var streamEvents = impatienceSorter.DequeueUntil(syncTime, out bool recheck);
<#          } #>
            if (streamEvents != null)
            {
                <#= baseStructure #> resultEvent;
                while ((streamEvents.Count > 0) && ((!recheck) || (streamEvents.PeekFirst().SyncTime <= syncTime)))
                {
                    resultEvent = streamEvents.Dequeue();
                    Process(ref resultEvent);
                }
                if (!recheck) impatienceSorter.Return(<#= !partitioned ? string.Empty : "entry.key , " #> streamEvents);
            }
<#          if (partitioned)
            {
                PopIndent(); #>
            }
<#          } #>
        }

<#      } #>
        // Update cached global times
        highWatermark = Math.Max(syncTime, highWatermark);
<#      if (partitioned)
        { #>
        if (this.lowWatermark.rawValue < syncTime)
        {
            UpdateLowWatermark(syncTime)

            // Gather keys whose high watermarks are before the new low watermark
            var expiredWatermarkKVPs = new List<KeyValuePair<long, HashSet<TKey>>>();
            foreach (var keyValuePair in highWatermarkToPartitionsMap)
            {
                // Since highWatermarkToPartitionsMap is sorted, we can stop as soon as we reach the threshold
                if (keyValuePair.Key >= this.lowWatermark.rawValue) break;

                expiredWatermarkKVPs.Add(keyValuePair);
            }

            // Clean up state from expired partitions
            foreach (var expiredWatermarkKVP in expiredWatermarkKVPs)
            {
                var expiredWatermark = expiredWatermarkKVP.Key;
                this.highWatermarkToPartitionsMap.Remove(expiredWatermark);

                var expiredKeys = expiredWatermarkKVP.Value;
                foreach (var expiredKey in expiredKeys)
                {
                    this.lastPunctuationTime.Remove(expiredKey);
                    this.partitionHighWatermarks.Remove(expiredKey);
                    this.currentTime.Remove(expiredKey);
#if DEBUG
                    this.lastEventTime.Remove(expiredKey);
#endif
                }
            }
        }
<#      }
        else
        { #>
        UpdateCurrentTime(syncTime);
        this.lastPunctuationTime = Math.Max(
            syncTime.SnapToLeftBoundary((long)this.punctuationGenerationPeriod),
            this.lastPunctuationTime);
<#      } #>

        // Add <#= globalPunctuation #> to batch
        var count = currentBatch.Count;
        currentBatch.vsync.col[count] = syncTime;
        currentBatch.vother.col[count] = <#= partitionString #>StreamEvent.<#= globalPunctuation #>OtherTime;
        currentBatch.bitvector.col[count >> 6] |= (1L << (count & 0x3f));
        currentBatch.key.col[count] = default;
        currentBatch[count] = default;
        currentBatch.hash.col[count] = 0;
        currentBatch.Count = count + 1;

        // Flush if necessary
        if (flushPolicy == <#= partitionString #>FlushPolicy.FlushOn<#= globalPunctuation #> ||
            (flushPolicy == <#= partitionString #>FlushPolicy.FlushOnBatchBoundary && currentBatch.Count == Config.DataBatchSize))
        {
            OnFlush();
        }
        else if (currentBatch.Count == Config.DataBatchSize)
        {
            FlushContents();
        }
    }

<#      if (partitioned && latencyOption == "WithLatency")
        { #>
    protected override void UpdatePointers()
    {
        foreach (var kvp in partitionHighWatermarks)
        {
            if (highWatermarkToPartitionsMap.TryGetValue(kvp.Value, out HashSet<TKey> set))
                set.Add(kvp.Key);
            else
                highWatermarkToPartitionsMap.Add(kvp.Value, new HashSet<TKey> { kvp.Key });
        }
    }

<#      } #>
    protected override void OnCompleted(long punctuationTime)
    {
        GenerateAndProcess<#= globalPunctuation #>(punctuationTime);

        // Flush, but if we just flushed due to the punctuation generated above
        if (flushPolicy != <#= partitionString #>FlushPolicy.FlushOn<#= globalPunctuation #>)
            OnFlush();
    }
}

<#+
private void AddToGeneratedBatch()
{
#>
{
    <#= GeneratedBatchName #> generatedBatch = (<#= GeneratedBatchName #>) this.currentBatch;
    var count = currentBatch.Count;
    currentBatch.vsync.col[count] = value.SyncTime;
    currentBatch.vother.col[count] = <#= generatedEndTimeVariable #>;
    currentBatch.key.col[count] = <#= emptyOrPartition #>;
    currentBatch.hash.col[count] = <#= partitionString == "Partitioned" ? "GetHashCode(value.PartitionKey)" : "0" #>;
<#+ if (resultRepresentation.noFields)
    { #>
    generatedBatch.payload.col[count] = <#= valueString #>;
<#+ }
    else
    { #>
<#+     if (this.resultMightBeNull)
        { #>
    if (<#= valueString #> == null)
    {
        generatedBatch._nullnessvector.col[count >> 6] |= (1L << (count & 0x3f));
    }
    else
    {
<#+         PushIndent("    ");
        } #>
<#+     foreach (var f in resultRepresentation.AllFields)
        {
            if (f.OptimizeString())
            { #>
        generatedBatch.<#= f.Name #>.AddString(<#= valueString #>.<#= f.OriginalName #>);
<#+         }
            else
            { #>
        generatedBatch.<#= f.Name #>.col[count] = <#= valueString #>.<#= f.OriginalName #>;
<#+         }
        }
    }  #>
<#+ if (this.resultMightBeNull)
    {
        PopIndent(); #>
    }
<#+ } #>

    currentBatch.Count++;
    if (currentBatch.Count == Config.DataBatchSize)
    {
        if (flushPolicy == <#= partitionString #>FlushPolicy.FlushOnBatchBoundary) OnFlush();
        else FlushContents();
    }
}
<#+
}
#>